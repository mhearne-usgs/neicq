/******************************************************/
/* 1b  Ensure it's empty */
/******************************************************/
TRUNCATE table HDB_MONITOR.PDEHydra;

/******************************************************/
/* 2  Insert base PDE Records, in the form: */
/******************************************************/

/* Note replace the values :MIKE_PDE_START and :MIKE_PDE_END with your desired 
   OT start/end interval times as epochtimes (secs since 1970),
   either via literals are by defining those variables prior to running the query 
   examples might include:
    1388534400 and 1396310399   // 2014Q1
    get_start_of_pde('201410') and get_end_of_pde('201410')  // PDE 2014 - 10
    DK 20140908
 ********************************************************************************/

insert into HDB_MONITOR.PDEHydra(idEvent, OT, Lat, Lon, Depth, Mag, idBHPF, iPDENum)
(select bhp.idEvent, tOrigin, dLat, dLon, dDepth, dPrefMag, bhp.idBHPellet, get_pde_from_ot(tOrigin)
 from all_bhpelletdescs bhp, 
	(
	select idevent, max(idbhpellet) idbhpellet from all_bhpelletdescs 
	where iworkflowstatus >= 8192*65536
	group by idevent
	) mbhp
 where bhp.idBHPellet = mbhp.idBHPellet
   and bhp.tOrigin between [STARTPDE] and [ENDPDE]
);

/******************************************************/
/* 4  Populate desired fields with additional info          */
/******************************************************/

/* 4a  Initial Detection (Origin) */
update HDB_MONITOR.PDEHydra p
set IDAOINITIAL = 
  (select min(ao2.idactualorigin) 
    from  all_actualorigin_info AO1, all_actualorigin_info AO2
  where AO1.idActualOrigin = (select min(idactualorigin) idAO 
					 from all_event_origin_info aeoi
					 where aeoi.idevent = p.idevent
					   and torigininserted = (select min(torigininserted) from all_event_origin_info where idevent = p.idevent and bitand(iAuthorType, 256) = 0)
					   and bitand(iAuthorType, 256) = 0
				   )
    and AO1.sauthoreventid = AO2.sauthoreventid
	and AO1.idAuthor = AO2.idAuthor
  )
where idEvent IS NOT NULL;

/* 4b  Initial Glass Detection (Origin) */
update HDB_MONITOR.PDEHydra p
set IDAOGLASS = 
  (select min(ao2.idactualorigin) 
    from All_actualorigin_info AO1, All_actualorigin_info AO2
  where AO1.idActualOrigin = (select min(idactualorigin) idAO 
					 from all_event_origin_info aeoi
					 where aeoi.idevent = p.idevent
					   and torigininserted = (select min(torigininserted) from all_event_origin_info where idevent = p.idevent and sauthornamehr like '%GLASS%' and sinstcode='NEIC')
					   and sauthornamehr like '%GLASS%' and sinstcode='NEIC'
				   )
    and AO1.sauthoreventid = AO2.sauthoreventid
	and AO1.idAuthor = AO2.idAuthor
  )
where idEvent IS NOT NULL;

/* 4c  Initial External Detection (Origin) */
update HDB_MONITOR.PDEHydra p
set IDAOEXT = 
  (select min(ao2.idactualorigin) 
    from All_actualorigin_info AO1, All_actualorigin_info AO2
  where AO1.idActualOrigin = (select min(idactualorigin) idAO 
					 from all_event_origin_info aeoi
					 where aeoi.idevent = p.idevent
					   and torigininserted = (select min(torigininserted) from all_event_origin_info where idevent = p.idevent and sinstcode!='NEIC')
					   and sinstcode!='NEIC'
				   )
    and AO1.sauthoreventid = AO2.sauthoreventid
	and AO1.idAuthor = AO2.idAuthor
  )
where idEvent IS NOT NULL;

/* 4d  Initial Mag Publication */
/* WARNING - THIS QUERY PRESUMES THAT PELLETS ARE LOADED IN TIME ORDER OF GENERATION.  THIS MAY NOT BE VALID */
update HDB_MONITOR.PDEHydra p
set IDBHPINIT = 
  (select min(idBHPellet) from ALL_BHPelletDescs b
    where b.idevent = p.idevent
	  and dprefmag >= 2.0
  )
where idEvent IS NOT NULL;

/* 4e  First passport entry */
update HDB_MONITOR.PDEHydra p
set tInitPP = 
  (select min(tPassEntryCreated) from ALL_EVENTPASSPORT_INFO ep
    where ep.idevent = p.idevent
	  and ep.idauthor != (select idauthor from ALL_AUTHOR_INFO where sname = 'Def_Passport')
  )
where idEvent IS NOT NULL;

/* 4f  Last Auto pellet publication */
/* WARNING - THIS QUERY PRESUMES THAT PELLETS ARE LOADED IN TIME ORDER OF GENERATION.  THIS MAY NOT BE VALID */
update HDB_MONITOR.PDEHydra p
set IDBHPAUTO = 
  (select max(idBHPellet) from ALL_BHPelletDescs b
    where b.idevent = p.idevent
	  and toutput < nvl(p.tinitpp, 9000000000)
  )
where idEvent IS NOT NULL;

/* 4g  Initial Quick Review publication */
/* WARNING - THIS QUERY PRESUMES THAT PELLETS ARE LOADED IN TIME ORDER OF GENERATION.  THIS MAY NOT BE VALID */
update HDB_MONITOR.PDEHydra p
set IDBHPQR = 
  (select min(idBHPellet) from ALL_BHPelletDescs b
    where b.idevent = p.idevent
	  and bitand(b.fpubstatus, 256) = 256 /* QR only */
	  and b.toutput - b.torigin < 7200 /* limit QR to 2 hour window? */
  )
where idEvent IS NOT NULL;

/* 4h  Final publication */
/* WARNING - THIS QUERY PRESUMES THAT PELLETS ARE LOADED IN TIME ORDER OF GENERATION.  THIS MAY NOT BE VALID */
update HDB_MONITOR.PDEHydra p
set IDBHPF = 
  (select max(idBHPellet) from ALL_BHPelletDescs b
    where b.idevent = p.idevent
	  and b.fpubstatus >= 256
  )
where idEvent IS NOT NULL;

/* 4i  Initial ATWC Public (Origin) */
update HDB_MONITOR.PDEHydra p
set IDAOATX = 
  (select min(ao2.idactualorigin) 
    from ALL_ActualOrigin_Info AO1, ALL_ActualOrigin_Info AO2
  where AO1.idActualOrigin = (select min(idactualorigin) idAO 
					 from all_event_origin_info aeoi
					 where aeoi.idevent = p.idevent
					   and torigininserted = (select min(torigininserted) from all_event_origin_info 
					                           where idevent = p.idevent and sinstcode = 'PMR' 
											     and bitand(iAuthorType, 3072 /* 3072=INTERNAL */) = 0)
					   and sinstcode = 'PMR' 
 					   and bitand(iAuthorType, 3072 /* 3072=INTERNAL */) = 0
				   )
    and AO1.sauthoreventid = AO2.sauthoreventid
	and AO1.idAuthor = AO2.idAuthor
  )
where idEvent IS NOT NULL;

/* 4j  Initial ATWC Internal (Origin) */
update HDB_MONITOR.PDEHydra p
set IDAOATI = 
  (select min(ao2.idactualorigin) 
    from ALL_ActualOrigin_Info AO1, ALL_ActualOrigin_Info AO2
  where AO1.idActualOrigin = (select min(idactualorigin) idAO 
					 from all_event_origin_info aeoi
					 where aeoi.idevent = p.idevent
					   and torigininserted = (select min(torigininserted) from all_event_origin_info 
					                           where idevent = p.idevent and sinstcode = 'PMR' 
											     and bitand(iAuthorType, 3072 /* 3072=INTERNAL */) = 3072)
					   and sinstcode = 'PMR' 
 					   and bitand(iAuthorType, 3072 /* 3072=INTERNAL */) = 3072
				   )
    and AO1.sauthoreventid = AO2.sauthoreventid
	and AO1.idAuthor = AO2.idAuthor
  )
where idEvent IS NOT NULL;

/* 4k  Initial PTWC Public (Origin) */
update HDB_MONITOR.PDEHydra p
set IDAOPTX = 
  (select min(ao2.idactualorigin) 
    from ALL_ActualOrigin_Info AO1, ALL_ActualOrigin_Info AO2
  where AO1.idActualOrigin = (select min(idactualorigin) idAO 
					 from all_event_origin_info aeoi
					 where aeoi.idevent = p.idevent
					   and torigininserted = (select min(torigininserted) from all_event_origin_info 
					                           where idevent = p.idevent and sinstcode = 'HON' 
											     and bitand(iAuthorType, 3072 /* 3072=INTERNAL */) = 0)
					   and sinstcode = 'HON' 
 					   and bitand(iAuthorType, 3072 /* 3072=INTERNAL */) = 0
				   )
    and AO1.sauthoreventid = AO2.sauthoreventid
	and AO1.idAuthor = AO2.idAuthor
  )
where idEvent IS NOT NULL;

/* 4l  Initial PTWC Internal (Origin) */
update HDB_MONITOR.PDEHydra p
set IDAOPTI = 
  (select min(ao2.idactualorigin) 
    from ALL_ActualOrigin_Info AO1, ALL_ActualOrigin_Info AO2
  where AO1.idActualOrigin = (select min(idactualorigin) idAO 
					 from all_event_origin_info aeoi
					 where aeoi.idevent = p.idevent
					   and torigininserted = (select min(torigininserted) from all_event_origin_info 
					                           where idevent = p.idevent and sinstcode = 'HON' 
											     and bitand(iAuthorType, 3072 /* 3072=INTERNAL */) = 3072)
					   and sinstcode = 'HON' 
 					   and bitand(iAuthorType, 3072 /* 3072=INTERNAL */) = 3072
				   )
    and AO1.sauthoreventid = AO2.sauthoreventid
	and AO1.idAuthor = AO2.idAuthor
  )
where idEvent IS NOT NULL;

/* 4m  OT + 10 min pellet */
/* WARNING - THIS QUERY PRESUMES THAT PELLETS ARE LOADED IN TIME ORDER OF GENERATION.  THIS MAY NOT BE VALID */
update HDB_MONITOR.PDEHydra p
set IDBHP10 = 
  (select max(idBHPellet) from ALL_BHPelletDescs b
    where b.idevent = p.idevent
	  and toutput <= torigin + 615 /* 10 minutes - with some cushion */
  )
where idEvent IS NOT NULL;

/* 4n  In Shadow of larger event? idEvent */
update HDB_MONITOR.PDEHydra p
set IDEVTSHADOW = 
	(select min(idEvent) from HDB_MONITOR.PDEHydra r
	 where OT between (p.OT - 3600) and p.OT
	   and ((r.Felt = 1 and r.mag > p.mag + 2) or 
	        (r.mag >= 6 and r.mag > p.mag + 0.2)
		   )
	   and p.idevent != r.idevent
	)
where idEvent IS NOT NULL;

/* 4o  idAOHInit - Hydra Origin for first pellet (assumes origins inserted in time order) */
declare
  Temp_idAuthorHydra number;
begin

select idAuthor into Temp_idAuthorHydra from ALL_Author_Info where sname = 'HYDRA' and itype = 342;

update HDB_MONITOR.PDEHydra p
set idAOHInit =
    (select max(idactualorigin) from ALL_ActualOrigin_Info a, ALL_BHPelletDescs b, ALL_Events e
	  where b.idBHPellet = p.idBHPInit
		and e.idEvent = b.idEvent
		and a.idauthor = Temp_idAuthorHydra 
		and a.sauthoreventid = e.huidevent
	    and a.tinserted < b.toutput
	 )
where idEvent IS NOT NULL;

end;

/* 4p  idAOHAuto - Hydra Origin for last auto pellet (assumes origins inserted in time order) */
declare
  Temp_idAuthorHydra number;
begin

select idAuthor into Temp_idAuthorHydra from ALL_Author_Info where sname = 'HYDRA' and itype = 342;

update HDB_MONITOR.PDEHydra p
set idAOHAuto =
    (select max(idactualorigin) from ALL_ActualOrigin_Info a, ALL_BHPelletDescs b, ALL_Events e
	  where b.idBHPellet = p.idBHPAuto
		and e.idEvent = b.idEvent
		and a.idauthor = Temp_idAuthorHydra 
		and a.sauthoreventid = e.huidevent
	    and a.tinserted < b.toutput
	 )
where idEvent IS NOT NULL;

end;

/* 4q  idAOHQR - Hydra Origin for first QR pellet (assumes origins inserted in time order) */
declare
  Temp_idAuthorHydra number;
begin

select idAuthor into Temp_idAuthorHydra from ALL_Author_Info where sname = 'HYDRA' and itype = 342;

update HDB_MONITOR.PDEHydra p
set idAOHQR =
    (select max(idactualorigin) from ALL_ActualOrigin_Info a, ALL_BHPelletDescs b, ALL_Events e
	  where b.idBHPellet = p.idBHPQR
		and e.idEvent = b.idEvent
		and b.idauthororigin = Temp_idAuthorHydra
		and a.idauthor = b.idauthororigin 
		and a.sauthoreventid = e.huidevent
	    and a.tinserted < b.toutput
	 )
where idBHPQR IS NOT NULL;

end;

/* 4r  idAOHF - Hydra Origin for Final pub pellet (assumes origins inserted in time order) */
declare
  Temp_idAuthorHydra number;
begin

select idAuthor into Temp_idAuthorHydra from ALL_Author_Info where sname = 'HYDRA' and itype = 342;

update HDB_MONITOR.PDEHydra p
set idAOHF =
    (select max(idactualorigin) from ALL_ActualOrigin_Info a, ALL_BHPelletDescs b, ALL_Events e
	  where b.idBHPellet = p.idBHPF
		and e.idEvent = b.idEvent
		and a.idauthor = Temp_idAuthorHydra 
		and a.sauthoreventid = e.huidevent
	    and a.tinserted < b.toutput
	 )
where idEvent IS NOT NULL;

end;

/* 4s  idAOH10 - Hydra Origin for Final pellet prior to OT + 10 min (assumes origins inserted in time order) */
declare
  Temp_idAuthorHydra number;
begin

select idAuthor into Temp_idAuthorHydra from ALL_Author_Info where sname = 'HYDRA' and itype = 342;

update HDB_MONITOR.PDEHydra p
set idAOH10 =
    (select max(idactualorigin) from ALL_ActualOrigin_Info a, ALL_BHPelletDescs b, ALL_Events e
	  where b.idBHPellet = p.idBHP10
		and e.idEvent = b.idEvent
		and a.idauthor = Temp_idAuthorHydra 
		and a.sauthoreventid = e.huidevent
	    and a.tinserted < b.toutput
	 )
where idEvent IS NOT NULL;

end;

/* 4t  Initial EventClaim record  - assumes EventClaim records are inserted in time order */
update HDB_MONITOR.PDEHydra p
set idECInit = 
	(select min(idEventClaim) from ALL_EventClaim_Info e
	 where idEvent = p.idEvent
	)
where idEvent IS NOT NULL;

/* 4u  Final EventClaim record  - assumes EventClaim records are inserted in time order */
update HDB_MONITOR.PDEHydra p
set idECLast = 
	(select max(idEventClaim) from ALL_EventClaim_Info e
	 where idEvent = p.idEvent
	)
where idEvent IS NOT NULL;

/* 4v  Initial MT-Only Review publication */
/* WARNING - THIS QUERY PRESUMES THAT PELLETS ARE LOADED IN TIME ORDER OF GENERATION.  THIS MAY NOT BE VALID */
update HDB_MONITOR.PDEHydra p
set IDBHPMTOnly = 
  (select max(idBHPellet) from ALL_BHPelletDescs b, ALL_EventPassport_Info ep
    where b.idevent = p.idevent
	  and bitand(b.fpubstatus, 256) = 256 /* QR only */
	  and b.toutput - b.torigin < 7200 /* limit QR to 2 hour window? */
	  and b.idevent = ep.idevent
	  and b.toutput < ep.tpassentrycreated
	  and ep.tpassentrycreated  - b.torigin < 7200 /* limit QR to 2 hour window? */
	  and ep.spassportcmd = 'BHOutputsStatus'
	  and ep.ideventpassport = (select min(ideventpassport) from ALL_EventPassport_Info 
	                             where idevent = p.idevent
								   and spassportentry like '%MTOnly%')
  )
where idEvent IS NOT NULL;

/* 4w  First Response Pellet  - assumes ALL_BHPelletDescs records are inserted in time order */
update HDB_MONITOR.PDEHydra p
set idBHPResp = 
	(select min(idbhpellet) from ALL_BHPelletDescs b
	 where idEvent = p.idEvent
	   and dprefmag >= 5
	)
where idEvent IS NOT NULL;

/* 4x  Initial QuickReview publication */
/* WARNING - THIS QUERY PRESUMES THAT PELLETS ARE LOADED IN TIME ORDER OF GENERATION.  THIS MAY NOT BE VALID */
update HDB_MONITOR.PDEHydra p
set IDEPQR = 
  (select min(idEventPassport) from ALL_BHPelletDescs b, ALL_EventPassport_Info ep
    where b.idBHPellet = p.idBHPQR
	  and b.idevent = ep.idevent
	  and b.toutput < ep.tpassentrycreated
	  and ep.spassportcmd = 'BHOutputsStatus'
  )
where idBHPQR IS NOT NULL;

/* 4y  Initial MT-Only Review publication */
/* WARNING - THIS QUERY PRESUMES THAT PELLETS ARE LOADED IN TIME ORDER OF GENERATION.  THIS MAY NOT BE VALID */
update HDB_MONITOR.PDEHydra p
set IDEPMTOnly = 
  (select min(idEventPassport) from ALL_BHPelletDescs b, ALL_EventPassport_Info ep
    where b.idBHPellet = p.idBHPMTOnly
	  and b.idevent = ep.idevent
	  and b.toutput < ep.tpassentrycreated
	  and ep.tpassentrycreated  - b.torigin < 7200 /* limit QR to 2 hour window? */
	  and ep.spassportcmd = 'BHOutputsStatus'
	  and ep.ideventpassport = (select min(ideventpassport) from ALL_EventPassport_Info 
	                             where idevent = p.idevent
								   and spassportentry like '%MTOnly%')
  )
where idBHPMTOnly IS NOT NULL;

/* 4z  Felt Report */
update HDB_MONITOR.PDEHydra p
set FELT = 1
  where p.idevent in
  (select e.idevent
    from ALL_Events e, all_comments c
	 where e.idComment is not null
	   and e.idComment = c.idcomment
	   and c.scomment like '%Felt%'
  )
and idEvent IS NOT NULL;

/* set all others to not felt */
update HDB_MONITOR.PDEHydra p 
set FELT = 0
where FELT IS NULL and idEvent IS NOT NULL;

